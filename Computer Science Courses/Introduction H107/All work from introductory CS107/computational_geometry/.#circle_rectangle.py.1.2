"""
    Test to see if a circular area and a rectangular area overlap.
    The circle is defined by a center x and y, and a radius 
        and the rectangle by xmin, xmax, ymin, ymax
    The parameters are those seven values, in the order above:
        center_x,center_y,radius,xmin,xmax,ymin,ymax
        
some examples:

# An obvious overlap:
>>> circle_rectangle_overlap(100,20,8, 80,120, 18,25)
True

# An obvious miss:
>>> circle_rectangle_overlap(100,20,8, 180,220, 18,25)
False



(Note we can't have a circle with negative radius)

##############################################################################

#Circle inside rectangle
>>> circle_rectangle_overlap( 240,234,35.4682957019, 149,335 ,143,314 )
True

#Rectangle inside circle
>>> circle_rectangle_overlap( 222 ,  218 ,  63.1347764707 ,  207 ,  235 ,  205 ,  230 )
True

#8 Points of intersection-  circle inside ish rectangle
>>> circle_rectangle_overlap( 265 ,  250 ,  78.4346862045 ,  203 ,  331 ,  190 ,  310 )
True

#Top Left Corner of Rectangle overlap
>>> circle_rectangle_overlap( 142 ,  114 ,  62.6258732474 ,  163 ,  334 ,  138 ,  331 )
True

#Top Right corner overlaps
>>> circle_rectangle_overlap( 312 ,  204 ,  60.0 ,  199 ,  328 ,  176 ,  327 )
True

#Bottom left corner overlaps
>>> circle_rectangle_overlap( 231 ,  309 ,  38.9101529167 ,  216 ,  361 ,  127 ,  330 )
True

#Bottom right corner overlaps
>>> circle_rectangle_overlap( 311 ,  292 ,  54.5618914628 ,  172 ,  331 ,  140 ,  317 )
True

#No overlap but shared x values
>>> circle_rectangle_overlap( 191 ,  341 ,  28.6530975638 ,  81 ,  364 ,  131 ,  288 )
False

#No overlap but shared y values
>>> circle_rectangle_overlap( 288 ,  197 ,  29.0688837075 ,  150 ,  235 ,  141 ,  303 )
False

#No Overlap and no shared x or y values
>>> circle_rectangle_overlap( 50 ,  92 ,  36.3593179254 ,  195 ,  394 ,  197 ,  254 )
False

#Circle intersects top of rectangle twice
>>> circle_rectangle_overlap( 225 ,  140 ,  71.6937933157 ,  137 ,  354 ,  177 ,  319 )
True

#Circle intersects bottom of rectangle twice
>>> circle_rectangle_overlap( 229 ,  315 ,  59.5482997238 ,  168 ,  345 ,  155 ,  274 )
True

#Circle intersects left side of rectangle twice
>>> circle_rectangle_overlap( 158 ,  230 ,  49.3355855342 ,  146 ,  361 ,  124 ,  333 )
True

#Circle intersects right side of rectangle twice
>>> circle_rectangle_overlap( 320 ,  251 ,  39.8497176903 ,  169 ,  301 ,  167 ,  347 )
True



##############################################################################

"""

# make Python look in the right place for logic.py
import sys
sys.path.append('/home/courses/python')

from math import *
from logic import *
    

def circle_rectangle_overlap(center_x,center_y,radius,xmin,xmax,ymin,ymax):
    precondition(radius >= 0 and xmin <= xmax and ymin <= ymax)
    # postcondition: return true iff there exists x, y in both shapes...
    MODE='mine'  # set to 'test samples', 'answer key', 'code review', or 'mine'
    
    if MODE=='mine':
        rect_x = (xmax - xmin)/2.0
        rect_y = (ymax - ymin)/2.0
    
        isects = []
    
        if center_x > xmin and center_x < xmax and center_y > ymin and center_y < ymax:
            return True
        elif ((rect_x - center_x)**2 + (rect_y - center_y)**2) < radius**2:
            return True
        for xval in [xmin, xmax]:
            if abs(xval - center_x) < radius:
                y_a = center_y + (radius**2 + (xval-center_x)**2)**0.5
                y_b = center_y - (radius**2 + (xval-center_x)**2)**0.5
                if y_a == y_b:
                    isects.append((xval, y_a))
            else:
                return True
                
        for yval in [ymin,ymax]:
            if abs(yval-center_y) < radius:
                x_a = center_x + (radius**2 + (yval-center_y)**2)**0.5
                x_b = center_x - (radius**2 + (yval-center_y)**2)**0.5
                if x_a == x_b:
                    isects.append((x_a, yval))
            else:
                return True
                
        isects = set(isects)
    
        if len(isects) > 1:
            return True
        else:
            return False
        
        
        
        # REPLACE THIS WITH YOUR ALGORITHM
    elif MODE=='code review':
        import circle_rectangle_to_review as review
        return review.circle_rectangle_overlap(center_x,center_y,radius,xmin,xmax,ymin,ymax)
    elif MODE=='answer key':
        print 'DAVE NEEDS TO FINISH THIS!'
    elif MODE=='test samples':
        from sample_answers.cs105.intersect.circle_rectangle_sample import circle_rectangle_overlap_samples
        answer = circle_rectangle_overlap_samples(center_x,center_y,radius,xmin,xmax,ymin,ymax)
        return answer
    else:
        print 'ERROR: You need to set MODE correctly in circle_rectangle_overlap in circle_rectangle.py'

# The following gets the "doctest" system to check test cases in the documentation comments
def _test():
    import doctest
    result = doctest.testmod()
    if result[0] == 0:
        print "Wahoo! Passed all", result[1], __file__.split('/')[-1], "tests!"
    else:
        print "Rats!"

if __name__ == "__main__": _test()
