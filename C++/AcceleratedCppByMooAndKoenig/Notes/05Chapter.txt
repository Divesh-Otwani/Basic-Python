05Chapter

# Chapter 5: Sequential Containers and Strings


## 5.1 Seperating Failing Students

 • Problem: separate out failing students
    ◦ make a fail vector and keep students to be only passing students

{{{c

   bool fgrade(const Student_info& s){
      return grade(s) < 60;
   }

}}}


 • First try: we parse the students and make 2 vectors: pass and fail
    ◦ Then we set students to be pass
{{{c

// separate passing and failing student records: first try
vector<Student_info> extract_fails(vector<Student_info>& students)
{
   vector<Student_info> pass, fail;
   for (vector<Student_info>::size_type i = 0;
         i != students.size(); ++i)
   if (fgrade(students[i]))
      fail.push_back(students[i]);
   else
      pass.push_back(students[i]);
   students = pass; // overwrites students
   return fail;

}

}}}

 • Flaws
    ◦ memory hog: too much space taken up
    ◦ Slow: overwrites all of original vector
    ◦ New strategy: remove failing elements
       ▸ Problem: this is slow
       ▸ Later on: 2 better ways
          ▹ use data structure that supports fast deletion
          ▹ use better algorithm from the start
       ▸ Direct implementation:

{{{c

   // second try: correct but potentially slow
vector<Student_info> extract_fails(vector<Student_info>& students){
   vector<Student_info> fail;
   vector<Student_info>::size_type i = 0;
   // invariant:elements [0, i) of students represent passing grades
   while (i != students.size()) {
      if (fgrade(students[i])) {i
         fail.push_back(students[i]);
         students.erase(students.begin() + i);
      }else{
         ++i;
      }
   }
   return fail;
}

}}}

 • New: vector has an erase method
    ◦ This takes in an iterable and remove the element it points to
       ▸ For now, know that students.begin() + i gets you to there
       ▸ We don't increment i because deleting it makes the index point to the next elem
    ◦ We can't precompute the size because it changes
       ▸ If we delete an elem size decreases by one
       ▸ Hence, the while guard is correct to recompute size each time
 • Our functions above only use the indicies in a sequential "iterative" way
    ◦ We just have an index that we use to get elements and increment
    ◦ Point: if we know the kind of behavior we need we can optimize data structures
       ▸ some are better than others at different behaviors
       ▸ Vectors are good at indexing: random access
    ◦ So, for now, we do a conversion to a more generic method using iterators



## 5.2 Iterators

 • DEF: An *iterator* is a value that
    ◦ identifies a container and points to an elem in it
    ◦ Provides operations to move between elements
    ◦ Restricts the operations to be efficient for the specific type
 • EX:

{{{c

for (vector<Student_info>::const_iterator iter = students.begin();
      iter != students.end(); ++iter){
   cout << iter->name << endl;
}

}}}

 • Every standard container has two connected iterator types
    ◦ These are
       ▸ container::const_iterator
       ▸ container::iterator
    ◦ You can convert the latter into the former but not vice versa
       ▸ We do this in line 97 b.c. students.begin() is not const
    ◦ Abstraction: only focus on the operations on iterators for now, see type later
    ◦ Operations: basically like pointers
       ▸ We can test for equality
       ▸ We can increment
       ▸ We access the corresponding element with dereferenceing
          ▹ The (*a).b as a→b works as expected
    ◦ Students.erase(students.begin() + i)
       ▸ This first evaluates s.begin() + i 
          ▹ + with an integer and vector iterator  increments or decrements the iterator
          ▹ Then, erase takes in an iterator, remove it's element and changes the vec
             ▪ It decreases size
             ▪ Changes all the next iterators
             ▪ Moves everything ahead back by one element



## 5.3 Replace Indicies with Iterators

{{{c

// version 3: iterators but no indexing; still potentially slow
vector<Student_info> extract_fails(vector<Student_info>& students)
{
   vector<Student_info> fail;
   vector<Student_info>::iterator iter = students.begin();
   while (iter != students.end()) {
      if (fgrade(*iter)) {
         fail.push_back(*iter);
         iter = students.erase(iter);

      } else
         ++iter;

   }
   return fail;

}

}}}

 • Line 138: iter = students.erase(iter)
    ◦ You know what the other part does
    ◦ But, its return value is the iterator to the next element
       ▸ This should now motivate why we have vec.end() be one past the last element
          ▹ half open ranges make things work out nicely
 • In the while loop guard
    ◦ we check the end iterator each time since it changes for each deletion
       ▸ If we didn't we would crash most of the time

## 5.4 Finding a better Data Structure: lists

 • We saw that erase is O(n) on vectors
    ◦ So, our program is O(n^2) which is bad
 • Use list: insert and delete well 


## 5.5 The list type

 • Lists are another container with the fast middle insert and deletion
    ◦ terrible random access
 • Comparision
    ◦ If a container grows and shrinks from one end only: vectors out preform
    ◦ Middle insert and deletion: lists out perform

{{{c

// version 4: use list instead of vector
list<Student_info> extract_fails(list<Student_info>& students)
{
   list<Student_info> fail;
   list<Student_info>::iterator iter = students.begin();
   while (iter != students.end()) {
      if (fgrade(*iter)) {
         fail.push_back(*iter);
         iter = students.erase(iter);

      } else
      ++iter;

   }
   return fail;

}

}}}

 • We have to change the rest of the program to use lists too but that is easy
 • Important Differences
    ◦ Not all iterators are obliterated with erase, just the one
    ◦ push_back only affects vector iterators
    ◦ can't use sort on lists
       ▸ use sort method
          ▹ list<Student_info> students;
          ▹ students.sort(compare);


## 5.6 String Parsing

 • Problem: parse a line of input into a vector of words
{{{c

vector<string> split(const string& s)
{
   vector<string> ret;
   typedef string::size_type string_size;
   string_size i = 0;
   // invariant: we have processed characters [original value of i, i)
   while (i != s.size()) {
      // ignore leading blanks
      // invariant: characters in range [original i, current i) are all spaces
      while (i != s.size() && isspace(s[i]))
         ++i;
         // find end of next word
      string_size j = i;
      // invariant: none of the characters in range [original j, current j)is a space
      while (j != s.size() && !isspace(s[j]))
         j++;
         // if we found some nonwhitespace characters
      if (i != j) {
         // copy from s starting at i and taking j - i chars
         ret.push_back(s.substr(i, j - i));
         i = j;

      }
   }
   return ret;
}
   
}}}


 • Need <cctype> for isspace
 • No change to the argument
 • Substring method s.substr(i, k)
    ◦ for index i and size k 
    ◦ returns string copy of s from i of length k


## 5.7 Testing our string parsing

{{{c

   int main() {
      string s;
      // read and split each line of input
      while (getline(cin, s)) { // self explanatory
         vector<string> v = split(s);
         // write each word in v
         for (vector<string>::size_type i = 0; i != v.size(); ++i)
            cout << v[i] << endl;

      }
      return 0;

   }

}}}

This should have equivalent output to...

{{{c

   int main(){
      string s;
      while( cin >> s ){
         cout << s << endl;

      }
      return 0;
   }

}}}


## 5.8 Joining Strings

 • Given a vec<str> print it out with a frame
    ◦ need a max width

{{{c

string::size_type width(const vector<string>& v)
{
   string::size_type maxlen = 0;
   for (vector<string>::size_type i = 0; i != v.size(); ++i)
      maxlen = max(maxlen, v[i].size());
      return maxlen;
}

}}}

 • The program

{{{c

   vector<string> frame(const vector<string>& v) { //const b/c
      vector<string> ret;
      string::size_type maxlen = width(v);
      string border(maxlen + 4, '*');
      // write the top border
      ret.push_back(border);
      // write each interior row, bordered by an asterisk and a space
      for (vector<string>::size_type i = 0; i != v.size(); ++i) {
         ret.push_back( "* " + v[i] +
         string(maxlen - v[i].size(), ' ') + " *");
      }
      // write the bottom border
      ret.push_back(border);
      return ret;

   }

}}}


### Verical Concat

{{{c

vector<string> vcat(const vector<string>& top,
const vector<string>& bottom)
{
   // copy the top picture
   vector<string> ret = top;
   // copy entire bottom picture
   for (vector<string>::const_iterator it = bottom.begin();
      it != bottom.end(); ++it) // overhead small for repeat end call
      ret.push_back(*it);
   return ret;

}


}}}

 • Easier method of appending a vector to a vector:
    ◦ vec.insert(vec.end(), newvec.begin(), newvec.end());


### Hcat

 • See problem description in chapter

{{{c

vector<string>
hcat(const vector<string>& left, const vector<string>& right)
{
   vector<string> ret;
   // add 1 to leave a space between pictures
   string::size_type width1 = width(left) + 1;
   // indices to look at elements from left and right respectively
   vector<string>::size_type i = 0, j = 0;// continue until we've seen all rows from both pictures
   while (i != left.size() || j != right.size()) {
      // construct new string to hold characters from both pictures
      string s;
      // copy a row from the left-hand side, if there is one
      if (i != left.size())
         s = left[i++];
         // pad to full width
         s += string(width1 - s.size(), ' ');
         // copy a row from the right-hand side, if there is one
         if (j != right.size())
            s += right[j++];
            // add s to the picture we're creating
            ret.push_back(s);

   }
   return
   ret;

}

}}}

 • Note
    ◦ Reason about code cleanly
    ◦ Important that s is reinintialized every time in the while loop
       ▸ Q: what happens otherwise?

## 5.9 Details

 • Containers
    ◦ Have c.rbegin() and c.rend()
    ◦ container c(c2); initilizes a copy of c2
    ◦ constainer<T> c(n); if T is an aritmatic type, zeroed out
       ▸ otherwise, it is n default elements of T
    ◦ container<T> c(b,e) copies begin() and to  end() open range of a container
    ◦ c.empty()
    ◦ c.insert(d,b,e)
       ▸ d, is iterator
       ▸ [b,e) is the open range inserted before d
    ◦ c.erase(iter)
    ◦ c.erase(b,e)
       ▸ Erases elements
       ▸ Fast for lists
       ▸ Slow for vectors
       ▸ May or may not change iterators: depends
    ◦ c.push_back(t)
    ◦ c[n]
       ▸ indexing if supported
 • Vectors
    ◦ v.reserve(int n)
       ▸ does not initilize (size is zero) but allocates space for n elements
          ▹ saves some overhead
    ◦ v.resize(n)
       ▸ resizes vector preserving elements
       ▸ DOES change size
       ▸ if it is made larger, elems copies
       ▸ If smaller, the last elems are truncated
 • lists
    ◦ l.sort() 
 • <cctype>
    ◦ lots of char testing functions: see details

## Checklist 

 • To do later





































